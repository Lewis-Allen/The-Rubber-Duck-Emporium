@page "/"
@inject IProductService productService;
@inject IBasketService basketService;

<h1>Products</h1>

@if (products == null)
{
    <p>Loading Products...</p>
}
else
{
    <div class="d-flex flex-wrap">
        @for(var i = 0; i < products.Length; i++)
        {
            ProductModel productLink = products[i];
            var buttonNumber = i;
            <div class="card" style="width: 15rem; margin: 5px;">
                <img class="card-img-top" src="https://picsum.photos/250" alt="@productLink.Name" style="border-radius: 0;">
                <div class="card-body">
                    <h5 class="card-title">@productLink.Name</h5>
                    <p class="card-subtitle mb-2 text-muted">@productLink.Price DuckBucks</p>
                    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                    <button class="btn btn-primary" @onclick="async () => AddToBasket(productLink, buttonNumber)" disabled="@buttons[buttonNumber]">
                        <span class="spinner-border spinner-border-sm" role="status" hidden="@(!buttons[buttonNumber])" aria-hidden="true"></span>
                        @(buttons[buttonNumber] ? "Adding..." : "Add to Basket")</button>
                </div>
            </div>
        }
    </div>
}

@code {

    ProductModel[] products;
    bool[] buttons;
    protected async override Task OnInitializedAsync()
    {
        var productList = await productService.GetAllProducts();
        buttons = new bool[productList.Length];
        products = productList;
    }

    async void AddToBasket(ProductModel product, int buttonNumber)
    {
        buttons[buttonNumber] = true;
        BasketItemModel basketItem = new(product, 1);
        await basketService.AddToBasket(basketItem);
        buttons[buttonNumber] = false;
        StateHasChanged();
    }
}