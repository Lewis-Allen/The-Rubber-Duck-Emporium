@page "/basket"
@inject IBasketService BasketService
@inject IOrderService OrderService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<h1>Basket</h1>

@if (CurrentBasket is null)
{
    <Loading />
}
else if (CurrentBasket.BasketItems.Count == 0)
{
    <p>Your basket is currently empty!</p>
}
else
{
    <table class="table table-bordered">
        <tr>
            <th>Product</th>
            <th>Quantity</th>
            <th>Price (DuckBucks)</th>
            <th></th>
            <th></th>
        </tr>
        @foreach (var basketItem in CurrentBasket.BasketItems.OrderBy(bi => bi.Product.Name))
        {
            var item = basketItem;
            <tr>
                <td>@item.Product.Name</td>
                <td>@item.Quantity</td>
                <td>@(item.Quantity * item.Product.Price)</td>
                <td class="min">
                    <button class="btn btn-sm btn-outline-warning" @onclick="() => UpdateItem(item.Product, item.Quantity - 1)">
                        <span class="oi oi-arrow-thick-bottom" title="Remove one" aria-hidden="true"></span>
                    </button>
                    <button class="btn btn-sm btn-outline-success" @onclick="() => UpdateItem(item.Product, item.Quantity + 1)">
                        <span class="oi oi-arrow-thick-top" title="Add one" aria-hidden="true"></span>
                    </button>
                </td>
                <td class="min">
                    <button class="btn btn-sm btn-danger" @onclick="() => UpdateItem(item.Product, 0)">
                        <span class="oi oi-x" title="Remove from basket" aria-hidden="true"></span>
                    </button>
                </td>
            </tr>
        }
        <tr>
            <td><h3>Total DuckBucks</h3></td>
            <td></td>
            <td><h3>@CurrentBasket.BasketItems.Sum(bi => bi.Quantity * bi.Product.Price)</h3></td>
            <td></td>
            <td></td>
        </tr>
    </table>

    <div class="d-flex">
        <button class="btn btn-danger" @onclick="ClearBasket">Clear Basket</button>
        <button class="btn btn-success" @onclick="PlaceOrder">Place Order - @CurrentBasket.BasketItems.Sum(bi => bi.Quantity * bi.Product.Price) DuckBucks</button>
    </div>
    }

@code {

    public BasketModel CurrentBasket { get; set; }

    protected async override Task OnInitializedAsync()
    {
        CurrentBasket = await BasketService.GetBasket();
    }

    protected async Task UpdateItem(ProductModel product, int quantity)
    {
        BasketItemModel basketItem = new(product, quantity);
        CurrentBasket = await BasketService.UpdateBasketItem(basketItem);
    }

    protected async Task ClearBasket()
    {
        CurrentBasket = await BasketService.ClearBasket();
    }

    protected async Task PlaceOrder()
    {
        var placedOrder = await OrderService.PlaceOrder(CurrentBasket);
        CurrentBasket = await BasketService.GetBasket();

        NavigationManager.NavigateTo($"/orders/{placedOrder.OrderID}");
    }
}
